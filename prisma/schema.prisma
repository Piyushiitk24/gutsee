// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Health profile
  colostomyDate DateTime?
  medicalNotes  String?
  
  // Relationships
  foods         Food[]
  meals         Meal[]
  outputs       StomaOutput[]
  gasSessions   GasSession[]
  irrigations   Irrigation[]
  symptoms      Symptom[]
  patterns      Pattern[]
  
  @@map("users")
}

model Food {
  id          String   @id @default(cuid())
  name        String
  brand       String?
  barcode     String?
  category    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Nutritional info
  calories    Float?
  protein     Float?
  fat         Float?
  carbs       Float?
  fiber       Float?
  sugar       Float?
  sodium      Float?
  
  // Custom fields
  isCustom    Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relationships
  ingredients FoodIngredient[]
  mealItems   MealItem[]
  
  @@map("foods")
}

model Ingredient {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String?
  description String?
  createdAt   DateTime @default(now())
  
  // Risk factors
  riskScore   Float?   @default(0)
  gasRisk     Float?   @default(0)
  outputRisk  Float?   @default(0)
  
  // Relationships
  foods       FoodIngredient[]
  
  @@map("ingredients")
}

model FoodIngredient {
  id           String @id @default(cuid())
  foodId       String
  ingredientId String
  percentage   Float?
  
  food         Food       @relation(fields: [foodId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  
  @@unique([foodId, ingredientId])
  @@map("food_ingredients")
}

model Meal {
  id          String   @id @default(cuid())
  name        String?
  notes       String?
  timestamp   DateTime
  location    String?
  
  // Meal context
  mealType    MealType @default(OTHER)
  isPlanned   Boolean  @default(false)
  confidence  Float?   @default(1.0)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relationships
  items       MealItem[]
  
  @@map("meals")
}

model MealItem {
  id          String @id @default(cuid())
  mealId      String
  foodId      String
  quantity    Float
  unit        String @default("g")
  notes       String?
  
  meal        Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)
  food        Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  
  @@map("meal_items")
}

model StomaOutput {
  id          String   @id @default(cuid())
  timestamp   DateTime
  volume      Float?
  consistency OutputConsistency?
  color       String?
  notes       String?
  
  // Context
  isFirstAfterIrrigation Boolean @default(false)
  hoursSinceIrrigation   Float?
  hoursSinceLastMeal     Float?
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("stoma_outputs")
}

model GasSession {
  id          String   @id @default(cuid())
  timestamp   DateTime
  duration    Int?     // minutes
  intensity   Int      // 1-10 scale
  frequency   Int?     // episodes in session
  notes       String?
  
  // Context
  isNighttime Boolean  @default(false)
  isPublic    Boolean  @default(false)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("gas_sessions")
}

model Irrigation {
  id          String   @id @default(cuid())
  timestamp   DateTime
  quality     IrrigationQuality
  duration    Int?     // minutes
  volume      Float?   // ml
  notes       String?
  
  // Effectiveness
  completeness Int     // 1-10 scale
  comfort     Int      // 1-10 scale
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("irrigations")
}

model Symptom {
  id          String   @id @default(cuid())
  timestamp   DateTime
  type        SymptomType
  severity    Int      // 1-10 scale
  description String?
  notes       String?
  
  // Context
  possibleTriggers String?
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("symptoms")
}

model Pattern {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        PatternType
  
  // Pattern data
  confidence  Float
  strength    Float
  frequency   Int?
  
  // Pattern rules (JSON)
  conditions  Json
  predictions Json?
  
  // Metadata
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("patterns")
}

// Enums
enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  OTHER
}

enum OutputConsistency {
  LIQUID
  SOFT
  FORMED
  HARD
}

enum IrrigationQuality {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum SymptomType {
  CRAMPING
  BLOATING
  NAUSEA
  FATIGUE
  PAIN
  OTHER
}

enum PatternType {
  FOOD_OUTPUT
  FOOD_GAS
  TIMING
  IRRIGATION
  SYMPTOM
}